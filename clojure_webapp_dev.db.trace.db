2017-02-09 08:40:39 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: テーブル "SCHEMA_MIGRATIONS" が見つかりません
Table "SCHEMA_MIGRATIONS" not found; SQL statement:
SELECT 1 FROM schema_migrations [42102-193]
2017-02-09 16:25:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: 不明なデータ型: "NOT"
Unknown data type: "NOT"; SQL statement:
CREATE TABLE daily
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
schedule_id NOT NULL,
room_id NOT NULL,
open_time timestamp NOT NULL,
start_time timestamp NOT NULL,
end_time timestamp NOT NULL);
ALTER TABLE daily
ADD CONSTRAINT fk_schedule_id
FOREIGN KEY (schedule_id)
REFERENCES schedule(id)
ON DELETE CASCADE;
ALTER TABLE daily
ADD CONSTRAINT fk_room_id
FOREIGN KEY (room_id)
REFERENCES room(id)
ON DELETE CASCADE;
 [50004-193]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:4080)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:3938)
	at org.h2.command.Parser.parseCreateTable(Parser.java:5977)
	at org.h2.command.Parser.parseCreate(Parser.java:4238)
	at org.h2.command.Parser.parsePrepared(Parser.java:362)
	at org.h2.command.Parser.parse(Parser.java:317)
	at org.h2.command.Parser.parse(Parser.java:289)
	at org.h2.command.Parser.prepareCommand(Parser.java:254)
	at org.h2.engine.Session.prepareLocal(Session.java:561)
	at org.h2.engine.Session.prepareCommand(Session.java:502)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1203)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:73)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:287)
	at clojure.java.jdbc$prepare_statement.invokeStatic(jdbc.clj:495)
	at clojure.java.jdbc$prepare_statement.invoke(jdbc.clj:454)
	at clojure.java.jdbc$db_do_prepared.invokeStatic(jdbc.clj:813)
	at clojure.java.jdbc$db_do_prepared.invoke(jdbc.clj:795)
	at clojure.java.jdbc$db_do_prepared.invokeStatic(jdbc.clj:802)
	at clojure.java.jdbc$db_do_prepared.invoke(jdbc.clj:795)
	at migratus.database$up_STAR_$fn__17735$fn__17744.invoke(database.clj:76)
	at migratus.database$up_STAR_$fn__17735.invoke(database.clj:75)
	at clojure.java.jdbc$db_transaction_STAR_.invokeStatic(jdbc.clj:613)
	at clojure.java.jdbc$db_transaction_STAR_.invoke(jdbc.clj:585)
	at clojure.java.jdbc$db_transaction_STAR_.invokeStatic(jdbc.clj:598)
	at clojure.java.jdbc$db_transaction_STAR_.invoke(jdbc.clj:585)
	at migratus.database$up_STAR_.invokeStatic(database.clj:68)
	at migratus.database$up_STAR_.invoke(database.clj:67)
	at migratus.database.Migration.up(database.clj:210)
	at migratus.core$up_STAR_.invokeStatic(core.clj:47)
	at migratus.core$up_STAR_.invoke(core.clj:45)
	at migratus.core$migrate_up_STAR_.invokeStatic(core.clj:55)
	at migratus.core$migrate_up_STAR_.invoke(core.clj:49)
	at migratus.core$migrate_STAR_.invokeStatic(core.clj:61)
	at migratus.core$migrate_STAR_.invoke(core.clj:59)
	at migratus.core$run.invokeStatic(core.clj:25)
	at migratus.core$run.invoke(core.clj:21)
	at migratus.core$migrate.invokeStatic(core.clj:66)
	at migratus.core$migrate.invoke(core.clj:63)
	at luminus_migrations.core$migrate.invokeStatic(core.clj:52)
	at luminus_migrations.core$migrate.invoke(core.clj:31)
	at clojure_webapp.core$_main.invokeStatic(core.clj:54)
	at clojure_webapp.core$_main.doInvoke(core.clj:49)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at clojure.lang.Var.invoke(Var.java:379)
	at user$eval18436.invokeStatic(form-init670352783805158741.clj:1)
	at user$eval18436.invoke(form-init670352783805158741.clj:1)
	at clojure.lang.Compiler.eval(Compiler.java:6927)
	at clojure.lang.Compiler.eval(Compiler.java:6917)
	at clojure.lang.Compiler.load(Compiler.java:7379)
	at clojure.lang.Compiler.loadFile(Compiler.java:7317)
	at clojure.main$load_script.invokeStatic(main.clj:275)
	at clojure.main$init_opt.invokeStatic(main.clj:277)
	at clojure.main$init_opt.invoke(main.clj:277)
	at clojure.main$initialize.invokeStatic(main.clj:308)
	at clojure.main$null_opt.invokeStatic(main.clj:342)
	at clojure.main$null_opt.invoke(main.clj:339)
	at clojure.main$main.invokeStatic(main.clj:421)
	at clojure.main$main.doInvoke(main.clj:384)
	at clojure.lang.RestFn.invoke(RestFn.java:421)
	at clojure.lang.Var.invoke(Var.java:383)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.Var.applyTo(Var.java:700)
	at clojure.main.main(main.java:37)
2017-02-09 16:27:46 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: テーブル "SCHEDULE" が見つかりません
Table "SCHEDULE" not found; SQL statement:

ALTER TABLE daily
ADD CONSTRAINT fk_schedule_id
FOREIGN KEY (schedule_id)
REFERENCES schedule(id)
ON DELETE CASCADE;
ALTER TABLE daily
ADD CONSTRAINT fk_room_id
FOREIGN KEY (room_id)
REFERENCES room(id)
ON DELETE CASCADE;
 [42102-193]
2017-02-09 16:41:22 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: テーブル "PROJECT_ID" が見つかりません
Table "PROJECT_ID" not found; SQL statement:

ALTER TABLE schedule
ADD CONSTRAINT fk_project_id
FOREIGN KEY (project_id)
REFERENCES project_id
ON DELETE CASCADE;

CREATE TABLE room
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(255),
address VARCHAR(255),
capacity INTEGER);

CREATE TABLE daily
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
schedule_id INTEGER NOT NULL,
room_id INTEGER NOT NULL,
open_time timestamp NOT NULL,
start_time timestamp NOT NULL,
end_time timestamp NOT NULL);
ALTER TABLE daily
ADD CONSTRAINT fk_schedule_id
FOREIGN KEY (schedule_id)
REFERENCES schedule(id)
ON DELETE CASCADE;
ALTER TABLE daily
ADD CONSTRAINT fk_room_id
FOREIGN KEY (room_id)
REFERENCES room(id)
ON DELETE CASCADE;

CREATE TABLE entry
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
entry_id char(24) NOT NULL UNIQUE,
schedule_id INTEGER NOT NULL,
timestamp TIMESTAMP NOT NULL);
ALTER TABLE entry
ADD CONSTRAINT fk_schedule_id
FOREIGN KEY (schedule_id)
REFERENCES schecule(id)
ON DELETE CASCADE;

CREATE TABLE student
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
student_id CHAR(36) NOT NULL UNIQUE,
entry_id INTEGER NOT NULL,
first_name VARCHAR(255) NOT NULL,
last_name VARCHAR(255) NOT NULL,
first_name_kana VARCHAR(255) NOT NULL,
last_name_kana VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL);
ALTER TABLE student
ADD CONSTRAINT fk_entry_id
FOREIGN KEY (entry_id)
REFERENCES entry(id)
ON DELETE CASCADE;
 [42102-193]
2017-02-09 16:43:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: テーブル "PROJECT" はすでに存在します
Table "PROJECT" already exists; SQL statement:

CREATE TABLE project
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
project_id char(24) NOT NULL UNIQUE);


CREATE TABLE course
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
course_id char(24) NOT NULL UNIQUE,
name VARCHAR(255) NOT NULL,
short_name VARCHAR(255) NOT NULL,
price INTEGER NOT NULL);

CREATE TABLE schedule
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
schedule_id char(24) NOT NULL UNIQUE,
course_id INTEGER NOT NULL,
project_id INTEGER NOT NULL,
price INTEGER NOT NULL);
ALTER TABLE schedule
ADD CONSTRAINT fk_course_id
FOREIGN KEY (course_id)
REFERENCES course(id)
ON DELETE CASCADE;
ALTER TABLE schedule
ADD CONSTRAINT fk_project_id
FOREIGN KEY (project_id)
REFERENCES project(id)
ON DELETE CASCADE;

CREATE TABLE room
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(255),
address VARCHAR(255),
capacity INTEGER);

CREATE TABLE daily
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
schedule_id INTEGER NOT NULL,
room_id INTEGER NOT NULL,
open_time timestamp NOT NULL,
start_time timestamp NOT NULL,
end_time timestamp NOT NULL);
ALTER TABLE daily
ADD CONSTRAINT fk_schedule_id
FOREIGN KEY (schedule_id)
REFERENCES schedule(id)
ON DELETE CASCADE;
ALTER TABLE daily
ADD CONSTRAINT fk_room_id
FOREIGN KEY (room_id)
REFERENCES room(id)
ON DELETE CASCADE;

CREATE TABLE entry
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
entry_id char(24) NOT NULL UNIQUE,
schedule_id INTEGER NOT NULL,
timestamp TIMESTAMP NOT NULL);
ALTER TABLE entry
ADD CONSTRAINT fk_schedule_id
FOREIGN KEY (schedule_id)
REFERENCES schecule(id)
ON DELETE CASCADE;

CREATE TABLE student
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
student_id CHAR(36) NOT NULL UNIQUE,
entry_id INTEGER NOT NULL,
first_name VARCHAR(255) NOT NULL,
last_name VARCHAR(255) NOT NULL,
first_name_kana VARCHAR(255) NOT NULL,
last_name_kana VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL);
ALTER TABLE student
ADD CONSTRAINT fk_entry_id
FOREIGN KEY (entry_id)
REFERENCES entry(id)
ON DELETE CASCADE;
 [42101-193]
2017-02-09 16:47:07 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: テーブル "PROJECT" はすでに存在します
Table "PROJECT" already exists; SQL statement:

CREATE TABLE project
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
project_id char(24) NOT NULL UNIQUE);


CREATE TABLE course
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
course_id char(24) NOT NULL UNIQUE,
name VARCHAR(255) NOT NULL,
short_name VARCHAR(255) NOT NULL,
price INTEGER NOT NULL);

CREATE TABLE schedule
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
schedule_id char(24) NOT NULL UNIQUE,
course_id INTEGER NOT NULL,
project_id INTEGER NOT NULL,
price INTEGER NOT NULL);
ALTER TABLE schedule
ADD CONSTRAINT fk_course_id
FOREIGN KEY (course_id)
REFERENCES course(id)
ON DELETE CASCADE;
ALTER TABLE schedule
ADD CONSTRAINT fk_project_id
FOREIGN KEY (project_id)
REFERENCES project(id)
ON DELETE CASCADE;

CREATE TABLE room
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(255),
address VARCHAR(255),
capacity INTEGER);

CREATE TABLE daily
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
schedule_id INTEGER NOT NULL,
room_id INTEGER NOT NULL,
open_time timestamp NOT NULL,
start_time timestamp NOT NULL,
end_time timestamp NOT NULL);
ALTER TABLE daily
ADD CONSTRAINT fk_schedule_id
FOREIGN KEY (schedule_id)
REFERENCES schedule(id)
ON DELETE CASCADE;
ALTER TABLE daily
ADD CONSTRAINT fk_room_id
FOREIGN KEY (room_id)
REFERENCES room(id)
ON DELETE CASCADE;

CREATE TABLE entry
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
entry_id char(24) NOT NULL UNIQUE,
schedule_id INTEGER NOT NULL,
timestamp TIMESTAMP NOT NULL);
ALTER TABLE entry
ADD CONSTRAINT fk_schedule_id
FOREIGN KEY (schedule_id)
REFERENCES schecule(id)
ON DELETE CASCADE;

CREATE TABLE student
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
student_id CHAR(36) NOT NULL UNIQUE,
entry_id INTEGER NOT NULL,
first_name VARCHAR(255) NOT NULL,
last_name VARCHAR(255) NOT NULL,
first_name_kana VARCHAR(255) NOT NULL,
last_name_kana VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL);
ALTER TABLE student
ADD CONSTRAINT fk_entry_id
FOREIGN KEY (entry_id)
REFERENCES entry(id)
ON DELETE CASCADE;
 [42101-193]
2017-02-09 16:56:29 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: テーブル "PROJECT" はすでに存在します
Table "PROJECT" already exists; SQL statement:

CREATE TABLE project
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
project_id char(24) NOT NULL UNIQUE);


CREATE TABLE course
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
course_id char(24) NOT NULL UNIQUE,
name VARCHAR(255) NOT NULL,
short_name VARCHAR(255) NOT NULL,
price INTEGER NOT NULL);

CREATE TABLE schedule
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
schedule_id char(24) NOT NULL UNIQUE,
course_id INTEGER NOT NULL,
project_id INTEGER NOT NULL,
price INTEGER NOT NULL);
ALTER TABLE schedule
ADD CONSTRAINT fk_course_id
FOREIGN KEY (course_id)
REFERENCES course(id)
ON DELETE CASCADE;
ALTER TABLE schedule
ADD CONSTRAINT fk_project_id
FOREIGN KEY (project_id)
REFERENCES project(id)
ON DELETE CASCADE;

CREATE TABLE room
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(255),
address VARCHAR(255),
capacity INTEGER);

CREATE TABLE daily
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
schedule_id INTEGER NOT NULL,
room_id INTEGER NOT NULL,
open_time timestamp NOT NULL,
start_time timestamp NOT NULL,
end_time timestamp NOT NULL);
ALTER TABLE daily
ADD CONSTRAINT fk_schedule_id
FOREIGN KEY (schedule_id)
REFERENCES schedule(id)
ON DELETE CASCADE;
ALTER TABLE daily
ADD CONSTRAINT fk_room_id
FOREIGN KEY (room_id)
REFERENCES room(id)
ON DELETE CASCADE;

CREATE TABLE entry
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
entry_id char(24) NOT NULL UNIQUE,
schedule_id INTEGER NOT NULL,
timestamp TIMESTAMP NOT NULL);
ALTER TABLE entry
ADD CONSTRAINT fk_schedule_id
FOREIGN KEY (schedule_id)
REFERENCES schecule(id)
ON DELETE CASCADE;

CREATE TABLE student
(id INTEGER PRIMARY KEY AUTO_INCREMENT,
student_id CHAR(36) NOT NULL UNIQUE,
entry_id INTEGER NOT NULL,
first_name VARCHAR(255) NOT NULL,
last_name VARCHAR(255) NOT NULL,
first_name_kana VARCHAR(255) NOT NULL,
last_name_kana VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL);
ALTER TABLE student
ADD CONSTRAINT fk_entry_id
FOREIGN KEY (entry_id)
REFERENCES entry(id)
ON DELETE CASCADE;
 [42101-193]
